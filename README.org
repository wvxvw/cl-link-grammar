* link-grammar parser
  It looks like the best way to do it right now is to

  #+BEGIN_SRC sh
    cd ~/Projects
    mkdir link-grammar
    cd ./link-grammar
    wget http://www.abisource.com/downloads/link-grammar/5.0.8/link-grammar-5.0.8.tar.gz
    tar -zxf ./link-grammar-5.0.8.tar.gz
    cd ./link-grammar-5.0.8
    ./configure
    make
    sudo make install
  #+END_SRC

  This should build and install the link-grammar parser (most importantly, it will put
  the link-grammar.so on the =$PATH=, so that we can easily link against it, when
  compiling Lisp bindings.

  The clinkgrammar.lisp found in this repository is a slightly altered output of what
  was generated by SWIG. The code I used to generate it is:

  #+BEGIN_SRC sh
    cd ~/Projects/link-grammar/link-grammar-5.0.8/bindings/lisp
    swig -cffi -module clinkgrammar -I../../link-grammar \
        -o ./clinkgrammar.lisp ../swig/link_grammar.i
  #+END_SRC

  I added the =in-package= code, but that's about all I did. In fact, the link_grammar.i
  interface can be modified to do that automatically, so we probably shouldn't version
  the clinkgrammar.lisp in the future, I am adding it here just to make sure we get the
  same or equivalent result. I think that if we want to continue to work on the bindings,
  than the best way to go about it would be to add (as little as possible) changes to
  the SWIG interface (which we could later ask the project developers to incorporate
  into their project), and to write the code that provides better abstraction to the
  C API separately. Maybe, for now, until the maintainers didn't update the interface
  we could ourselves host the modified version of the interface.
