;; -*- mode: lisp; package: link-grammar -*-
;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.8
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(in-package :link-grammar)

(define-foreign-library link-grammar
  (:unix (:or "/usr/local/lib/liblink-grammar.so"
              "/usr/local/lib/liblink-grammar.so.5"
              "/usr/local/lib/liblink-grammar.so.5.0.8"))
  (t (:default "liblink-grammar")))

(use-foreign-library link-grammar)

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcenum ConstituentDisplayStyle
	(:NO_DISPLAY #.0)
	(:MULTILINE #.1)
	(:BRACKET_TREE #.2)
	(:SINGLE_LINE #.3)
	(:MAX_STYLES #.3))

(cffi:defcenum Cost_Model_type
	(:VDAL #.1)
	:CORPUS)

(cffi:defcfun ("linkgrammar_get_version" linkgrammar_get_version) :string)

(cffi:defcfun ("linkgrammar_get_dict_version" linkgrammar_get_dict_version) :string
  (dict :pointer))

(cffi:defcfun ("dictionary_create_lang" dictionary_create_lang) :pointer
  (lang :string))

(cffi:defcfun ("dictionary_create_default_lang" dictionary_create_default_lang) :pointer)

(cffi:defcfun ("dictionary_delete" dictionary_delete) :void
  (dict :pointer))

(cffi:defcfun ("dictionary_set_data_dir" dictionary_set_data_dir) :void
  (path :string))

(cffi:defcfun ("dictionary_get_data_dir" dictionary_get_data_dir) :string)

(cffi:defcfun ("parse_options_create" parse_options_create) :pointer)

(cffi:defcfun ("parse_options_delete" parse_options_delete) :int
  (opts :pointer))

(cffi:defcfun ("parse_options_set_verbosity" parse_options_set_verbosity) :void
  (opts :pointer)
  (verbosity :int))

(cffi:defcfun ("parse_options_get_verbosity" parse_options_get_verbosity) :int
  (opts :pointer))

(cffi:defcfun ("parse_options_set_linkage_limit" parse_options_set_linkage_limit) :void
  (opts :pointer)
  (linkage_limit :int))

(cffi:defcfun ("parse_options_get_linkage_limit" parse_options_get_linkage_limit) :int
  (opts :pointer))

(cffi:defcfun ("parse_options_set_disjunct_cost" parse_options_set_disjunct_cost) :void
  (opts :pointer)
  (disjunct_cost :double))

(cffi:defcfun ("parse_options_get_disjunct_cost" parse_options_get_disjunct_cost) :double
  (opts :pointer))

(cffi:defcfun ("parse_options_set_min_null_count" parse_options_set_min_null_count) :void
  (opts :pointer)
  (null_count :int))

(cffi:defcfun ("parse_options_get_min_null_count" parse_options_get_min_null_count) :int
  (opts :pointer))

(cffi:defcfun ("parse_options_set_max_null_count" parse_options_set_max_null_count) :void
  (opts :pointer)
  (null_count :int))

(cffi:defcfun ("parse_options_get_max_null_count" parse_options_get_max_null_count) :int
  (opts :pointer))

(cffi:defcfun ("parse_options_set_islands_ok" parse_options_set_islands_ok) :void
  (opts :pointer)
  (islands_ok :int))

(cffi:defcfun ("parse_options_get_islands_ok" parse_options_get_islands_ok) :int
  (opts :pointer))

(cffi:defcfun ("parse_options_set_short_length" parse_options_set_short_length) :void
  (opts :pointer)
  (short_length :int))

(cffi:defcfun ("parse_options_get_short_length" parse_options_get_short_length) :int
  (opts :pointer))

(cffi:defcfun ("parse_options_set_max_memory" parse_options_set_max_memory) :void
  (opts :pointer)
  (mem :int))

(cffi:defcfun ("parse_options_get_max_memory" parse_options_get_max_memory) :int
  (opts :pointer))

(cffi:defcfun ("parse_options_set_max_parse_time" parse_options_set_max_parse_time) :void
  (opts :pointer)
  (secs :int))

(cffi:defcfun ("parse_options_get_max_parse_time" parse_options_get_max_parse_time) :int
  (opts :pointer))

(cffi:defcfun ("parse_options_set_cost_model_type" parse_options_set_cost_model_type) :void
  (opts :pointer)
  (cm Cost_Model_type))

(cffi:defcfun ("parse_options_get_cost_model_type" parse_options_get_cost_model_type) Cost_Model_type
  (opts :pointer))

(cffi:defcfun ("parse_options_timer_expired" parse_options_timer_expired) :int
  (opts :pointer))

(cffi:defcfun ("parse_options_memory_exhausted" parse_options_memory_exhausted) :int
  (opts :pointer))

(cffi:defcfun ("parse_options_resources_exhausted" parse_options_resources_exhausted) :int
  (opts :pointer))

(cffi:defcfun ("parse_options_set_display_morphology" parse_options_set_display_morphology) :void
  (opts :pointer)
  (val :int))

(cffi:defcfun ("parse_options_get_display_morphology" parse_options_get_display_morphology) :int
  (opts :pointer))

(cffi:defcfun ("parse_options_set_spell_guess" parse_options_set_spell_guess) :void
  (opts :pointer)
  (val :int))

(cffi:defcfun ("parse_options_get_spell_guess" parse_options_get_spell_guess) :int
  (opts :pointer))

(cffi:defcfun ("parse_options_set_all_short_connectors" parse_options_set_all_short_connectors) :void
  (opts :pointer)
  (val :int))

(cffi:defcfun ("parse_options_get_all_short_connectors" parse_options_get_all_short_connectors) :int
  (opts :pointer))

(cffi:defcfun ("parse_options_reset_resources" parse_options_reset_resources) :void
  (opts :pointer))

(cffi:defcfun ("sentence_create" sentence_create) :pointer
  (input_string :string)
  (dict :pointer))

(cffi:defcfun ("sentence_delete" sentence_delete) :void
  (sent :pointer))

(cffi:defcfun ("sentence_parse" sentence_parse) :int
  (sent :pointer)
  (opts :pointer))

(cffi:defcfun ("sentence_length" sentence_length) :int
  (sent :pointer))

(cffi:defcfun ("sentence_null_count" sentence_null_count) :int
  (sent :pointer))

(cffi:defcfun ("sentence_num_linkages_found" sentence_num_linkages_found) :int
  (sent :pointer))

(cffi:defcfun ("sentence_num_valid_linkages" sentence_num_valid_linkages) :int
  (sent :pointer))

(cffi:defcfun ("sentence_num_linkages_post_processed" sentence_num_linkages_post_processed) :int
  (sent :pointer))

(cffi:defcfun ("sentence_num_violations" sentence_num_violations) :int
  (sent :pointer)
  (i :int))

(cffi:defcfun ("sentence_disjunct_cost" sentence_disjunct_cost) :double
  (sent :pointer)
  (i :int))

(cffi:defcfun ("sentence_link_cost" sentence_link_cost) :int
  (sent :pointer)
  (i :int))

(cffi:defcfun ("linkage_create" linkage_create) :pointer
  (index :int)
  (sent :pointer)
  (opts :pointer))

(cffi:defcfun ("linkage_delete" linkage_delete) :void
  (linkage :pointer))

(cffi:defcfun ("linkage_print_diagram" linkage_print_diagram) :string
  (linkage :pointer)
  (display_walls :pointer)
  (screen_width :pointer))

(cffi:defcfun ("linkage_print_postscript" linkage_print_postscript) :string
  (linkage :pointer)
  (display_walls :pointer)
  (print_ps_header :pointer))

(cffi:defcfun ("linkage_get_sentence" linkage_get_sentence) :pointer
  (linkage :pointer))

(cffi:defcfun ("linkage_get_num_words" linkage_get_num_words) :int
  (linkage :pointer))

(cffi:defcfun ("linkage_get_num_links" linkage_get_num_links) :int
  (linkage :pointer))

(cffi:defcfun ("linkage_get_link_lword" linkage_get_link_lword) :int
  (linkage :pointer)
  (index :int))

(cffi:defcfun ("linkage_get_link_rword" linkage_get_link_rword) :int
  (linkage :pointer)
  (index :int))

(cffi:defcfun ("linkage_get_link_length" linkage_get_link_length) :int
  (linkage :pointer)
  (index :int))

(cffi:defcfun ("linkage_get_link_label" linkage_get_link_label) :string
  (linkage :pointer)
  (index :int))

(cffi:defcfun ("linkage_get_link_llabel" linkage_get_link_llabel) :string
  (linkage :pointer)
  (index :int))

(cffi:defcfun ("linkage_get_link_rlabel" linkage_get_link_rlabel) :string
  (linkage :pointer)
  (index :int))

(cffi:defcfun ("linkage_get_link_num_domains" linkage_get_link_num_domains) :int
  (linkage :pointer)
  (index :int))

(cffi:defcfun ("linkage_get_link_domain_names" linkage_get_link_domain_names) :pointer
  (linkage :pointer)
  (index :int))

(cffi:defcfun ("linkage_get_words" linkage_get_words) :pointer
  (linkage :pointer))

(cffi:defcfun ("linkage_get_word" linkage_get_word) :string
  (linkage :pointer)
  (w :int))

(cffi:defcfun ("linkage_print_links_and_domains" linkage_print_links_and_domains) :string
  (linkage :pointer))

(cffi:defcfun ("linkage_print_senses" linkage_print_senses) :string
  (linkage :pointer))

(cffi:defcfun ("linkage_print_constituent_tree" linkage_print_constituent_tree) :string
  (linkage :pointer)
  (mode ConstituentDisplayStyle))

(cffi:defcfun ("linkage_unused_word_cost" linkage_unused_word_cost) :int
  (linkage :pointer))

(cffi:defcfun ("linkage_disjunct_cost" linkage_disjunct_cost) :double
  (linkage :pointer))

(cffi:defcfun ("linkage_link_cost" linkage_link_cost) :int
  (linkage :pointer))

(cffi:defcfun ("linkage_corpus_cost" linkage_corpus_cost) :double
  (linkage :pointer))

(cffi:defcfun ("linkage_get_violation_name" linkage_get_violation_name) :string
  (linkage :pointer))


